name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker image
        run: docker build -t st125050/a3car:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: docker push st125050/a3car:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Generate temporary SSH keypair
        id: generate_temp_key
        run: |
          ssh-keygen -t rsa -b 4096 -m PEM -C "temporary_deployment_key" -q -N "" -f temporary_key
          echo "PUBLIC_KEY<<EOF" >> $GITHUB_ENV
          cat temporary_key.pub >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          cat temporary_key >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Add public key to server
        env:
          SSH_PUBLIC_KEY: ${{ env.PUBLIC_KEY }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "$SSH_PUBLIC_KEY" | ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys'

      - name: Deploy application
        env:
          SSH_PRIVATE_KEY: ${{ env.PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          echo "$SSH_PRIVATE_KEY" > temporary_key
          chmod 600 temporary_key
          scp -i temporary_key my_application.tar.gz $REMOTE_USER@$REMOTE_HOST:/path/to/target
          ssh -i temporary_key $REMOTE_USER@$REMOTE_HOST 'tar -xvf /path/to/target/my_application.tar.gz && sudo systemctl start my_application'
          rm -f temporary_key
