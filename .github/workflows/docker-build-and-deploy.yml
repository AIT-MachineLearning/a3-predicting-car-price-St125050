name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker image
        run: |
          cd st125050-a3car
          docker build -t st125050/a3car:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: docker push st125050/a3car:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy application
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          INTERMEDIATE_HOST: bazooka.cs.ait.ac.th
          REMOTE_USER: st125050
          REMOTE_HOST: ml-brain.cs.ait.ac.th
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        run: |
          echo "$SSH_PRIVATE_KEY" > temporary_key
          chmod 600 temporary_key

          # Create SSH config for multi-hop setup
          echo "Host ${INTERMEDIATE_HOST}
            User ${REMOTE_USER}
            Hostname ${INTERMEDIATE_HOST}
            IdentityFile ~/temporary_key
            StrictHostKeyChecking no
            ProxyCommand ssh -i ~/temporary_key -W %h:%p ${REMOTE_USER}@${INTERMEDIATE_HOST}

          Host ${REMOTE_HOST}
            User ${REMOTE_USER}
            Hostname ${REMOTE_HOST}
            IdentityFile ~/temporary_key
            StrictHostKeyChecking no" > ~/.ssh/config

          # Ensure the SSH config has proper permissions
          chmod 600 ~/.ssh/config

          # Deploy the application to the final remote host
          ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} << 'EOF'
            # Navigate to the directory with the Dockerfile
            cd st125050-a3car

            # Pull the latest Docker image
            docker pull st125050/a3car:latest

            # Stop and remove any existing container with the specified name
            docker stop ${CONTAINER_NAME} || true
            docker rm ${CONTAINER_NAME} || true

            # Run the Docker container
            docker run -d --name ${CONTAINER_NAME} -p 8505:8505 st125050/a3car:latest

            # Check if the container is running
            if [ "$(docker ps -q -f name=${CONTAINER_NAME})" ]; then
              echo "Deployment successful! The container is running."
            else
              echo "Deployment failed."
              exit 1
            fi
          EOF

          # Clean up
          rm -f temporary_key
          rm -f ~/.ssh/config
