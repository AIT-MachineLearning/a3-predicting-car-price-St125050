# Name of this workflow
name: CI/CD Pipeline

# When this action will be triggered
on: [workflow_dispatch]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - uses: actions/checkout@v4

      # Build the Docker image
      - name: Build the Docker image
        run: docker compose build

      # Start the containers
      - name: Compose up
        run: docker compose up -d

      # Run tests
      - name: Testing
        run: |
          cd code
          python -m unittest discover -s code -p "test_*.py"

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Prepare Docker metadata
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: st125050/a3car
          tags: ${{ github.ref_name }}

      # Build and push the Docker image
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  deploy:
    needs: build-test
    runs-on: ubuntu-latest

    steps:
      # Checkout code again for deployment
      - uses: actions/checkout@v4

      # Deploy application
      - name: Deploy application
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          INTERMEDIATE_HOST: bazooka.cs.ait.ac.th
          INTERMEDIATE_HOST_PASSWORD: ${{ secrets.INTERMEDIATE_HOST_PASSWORD }}
          REMOTE_USER: st125050
          CONTAINER_NAME: streamlit_app
        run: |
          # Create SSH key file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > $HOME/temporary_key
          chmod 600 $HOME/temporary_key

          # Ensure .ssh directory exists
          mkdir -p $HOME/.ssh

          # Create SSH config
          cat << EOF > $HOME/.ssh/config
Host ${INTERMEDIATE_HOST}
    User ${REMOTE_USER}
    Hostname ${INTERMEDIATE_HOST}
    IdentityFile $HOME/temporary_key
    StrictHostKeyChecking no

Host ${REMOTE_HOST}
    User ${REMOTE_USER}
    Hostname ${REMOTE_HOST}
    IdentityFile $HOME/temporary_key
    StrictHostKeyChecking no
    ProxyCommand sshpass -p '${{ secrets.INTERMEDIATE_HOST_PASSWORD }}' ssh -o StrictHostKeyChecking=no -W %h:%p ${REMOTE_USER}@${INTERMEDIATE_HOST}
EOF

          # Ensure the SSH config has proper permissions
          chmod 600 $HOME/.ssh/config

          # Deploy the application to the final remote host
          sshpass -p '${{ secrets.INTERMEDIATE_HOST_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${INTERMEDIATE_HOST} << 'EOF'
            # Pull the latest Docker image
            docker pull st125050/a3car:latest
            
            # Deploy using Docker Compose from the image
            docker run --rm st125050/a3car:latest docker-compose up -d

            # Check if the container is running and get the logs
            if [ "$(docker ps -q -f name=${CONTAINER_NAME})" ]; then
              echo "Deployment successful! The container is running."
              docker logs ${CONTAINER_NAME}
            else
              echo "Deployment failed."
              exit 1
            fi
          EOF

          # Clean up
          rm -f $HOME/temporary_key
          rm -f $HOME/.ssh/config
